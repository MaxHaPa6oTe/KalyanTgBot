const { Reservation } = require('../models');
const { format, startOfWeek, endOfWeek } = require('date-fns');
const { ru } = require('date-fns/locale');
const Sequelize = require('sequelize');

module.exports = {
  showWeeklyReservations: async (bot, chatId) => {
    try {
      const weekStart = startOfWeek(new Date(), { locale: ru });
      const weekEnd = endOfWeek(new Date(), { locale: ru });

      const reservations = await Reservation.findAll({
        where: {
          data: {
            [Sequelize.Op.between]: [
              format(weekStart, 'yyyy-MM-dd'),
              format(weekEnd, 'yyyy-MM-dd')
            ]
          }
        },
        order: [['data', 'ASC'], ['time', 'ASC']]
      });

      if (reservations.length === 0) {
        return await bot.sendMessage(chatId, '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –±—Ä–æ–Ω–µ–π –Ω–µ—Ç.');
      }

      let message = 'üìÖ –ë—Ä–æ–Ω–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n';
      let currentDate = null;

      reservations.forEach(res => {
        const date = new Date(res.data);
        const formattedDate = format(date, 'EEEE, d MMMM', { locale: ru });
        
        if (formattedDate !== currentDate) {
          message += `\nüìå <b>${formattedDate}</b>\n`;
          currentDate = formattedDate;
        }

        message += `‚è∞ ${res.time} - ${res.ktoBron} (${res.kolich} —á–µ–ª.)\n` +
                   `üìû ${res.phoneNumber || '–Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}\n\n`;
      });

      await bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_week' }]
          ]
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–µ–π:', error);
      await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é.');
    }
  }
};