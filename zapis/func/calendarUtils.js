const { monthsRu } = require('./const');

module.exports = function(contextManager) {
  // –í—ã–Ω–æ—Å–∏–º formatDate –≤ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
  const formatDate = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()-1).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  return {
    sendCalendar: (bot, chatId) => {
      try {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const dates = [];
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 20 –¥–Ω–µ–π, –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π
        for (let i = 0; i < 20; i++) {
          const date = new Date(today);
          date.setDate(today.getDate() + i);
          dates.push(date);
        }

        const keyboard = [];
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ 4 –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ
        for (let i = 0; i < dates.length; i += 4) {
          const row = dates.slice(i, i + 4).map(date => ({
            text: `${date.getDate()} ${monthsRu[date.getMonth()]}`,
            callback_data: `date_${formatDate(date)}` // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
          }));
          keyboard.push(row);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        bot.sendMessage(chatId, 'üìÖ–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', {
          reply_markup: {
            inline_keyboard: contextManager.ensureKeyboardObjects(keyboard)
          }
        });

      } catch (error) {
        console.error('Error in sendCalendar:', error);
        bot.sendMessage(chatId, '‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
      }
    },
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º formatDate –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    formatDate
  };
};