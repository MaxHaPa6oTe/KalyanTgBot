const contextManager = require('./zapis/func/contextManager');
const calendarUtils = require('./zapis/func/calendarUtils');
const timeUtils = require('./zapis/func/timeUtils');
const chat = require('./zapis/chat');
const bot = require('./bot');
const sequelize = require('./config/database');
const { syncModels } = require('./models');
const sms = require('./sms')(sequelize);
const commands = require('./zapis/commands');
const adminCommands = require('./zapis/adminCommands');
require('dotenv').config();

const userContexts = {};

async function init() {
  try {
    await sequelize.authenticate();
    await syncModels();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    const cm = contextManager(userContexts);
    const cu = calendarUtils(cm);
    const tu = timeUtils(cm);
    const rh = chat(bot, cm, cu, tu);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const sendAdminQuickAccess = (chatId) => {
      if (chatId.toString() === process.env.TG_ID) {
        bot.sendMessage(chatId, '–í–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', {
          reply_markup: {
            keyboard: [
              [{ text: 'üìä –ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: false
          }
        });
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start/, (msg) => {
      rh.start(msg.chat.id);
      sendAdminQuickAccess(msg.chat.id);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
    bot.on('message', (msg) => {
      if (!msg.text || msg.text.startsWith('/')) return;
      
      const chatId = msg.chat.id;
      
      if (chatId.toString() === process.env.TG_ID && msg.text === 'üìä –ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é') {
        adminCommands.showWeeklyReservations(bot, chatId);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏)
    bot.on('callback_query', async (callbackQuery) => {
      const chatId = callbackQuery.message.chat.id;
      const messageId = callbackQuery.message.message_id;
      const data = callbackQuery.data;

      try {
        if (data.startsWith('ask_cancel_')) {
          const reservationId = data.split('_')[2];
          await commands.askCancelConfirmation(bot, chatId, reservationId, messageId);
        }
        else if (data.startsWith('confirm_cancel_')) {
          const reservationId = data.split('_')[2];
          await commands.cancelReservation(bot, chatId, reservationId, messageId);
        }
        else if (data.startsWith('reject_cancel_')) {
          await bot.deleteMessage(chatId, messageId);
        }
        else if (data === 'refresh_week' && chatId.toString() === process.env.TG_ID) {
          await bot.deleteMessage(chatId, messageId);
          await adminCommands.showWeeklyReservations(bot, chatId);
        }

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
        await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } finally {
        bot.answerCallbackQuery(callbackQuery.id);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_bron
    bot.onText(/\/my_bron/, (msg) => {
      commands.showUserReservations(bot, msg.chat.id);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
    bot.onText(/\/info/, (msg) => {
      commands.showContacts(bot, msg.chat.id);
    });

    sms.startReminderService();
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
  }
}

init();