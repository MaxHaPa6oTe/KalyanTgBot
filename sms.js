const { Op, Sequelize } = require('sequelize');
const Reservation = require('./models/Reservation');
const bot = require('./bot');
const moment = require('moment');
require('moment/locale/ru');
require('dotenv').config();

module.exports = (sequelize) => {
  return {
  startReminderService: async () => {
    console.log('üîî –°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.');
    
    setInterval(async () => {
      try {
        const now = new Date();
        // console.log(`‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ ${now.toLocaleString()}`);
        
        // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –∏ 10 –º–∏–Ω—É—Ç
        const oneHourLater = new Date(now.getTime() + 30 * 60 * 1000);
        // const tenMinutesLater = new Date(now.getTime() + 10 * 60 * 1000);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∞
        const currentDate = moment(now).format('YYYY-MM-DD');
        const timePlus1Hour = moment(oneHourLater).format('HH:mm');
        // const timePlus10Min = moment(tenMinutesLater).format('HH:mm');

        // console.log('üîç –ò—â–µ–º –±—Ä–æ–Ω–∏ –Ω–∞:', {
        //   date: currentDate,
        //   times: [timePlus1Hour]
        // });

        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è PostgreSQL
        const reservations = await Reservation.findAll({
          where: {
            [Op.and]: [
              sequelize.where(
                sequelize.fn('date', sequelize.col('data')),
                currentDate
              ),
              {
                time: {
                  [Op.or]: [
                  
                    timePlus1Hour
                  ]
                }
              }
            ]
          }
        });

        // console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${reservations.length}`);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        for (const reservation of reservations) {
          try {
            const message = `üîî –ß–µ—Ä–µ–∑ 30 –º–∏–Ω –∫ –≤–∞–º –ø—Ä–∏–¥—É—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏!\n\n` +
              `–°—Ç–æ–ª–∏–∫ –∑–∞–±—Ä–∞–Ω–∏—Ä–æ–≤–∞–ª ${reservation.ktoBron} –Ω–∞ ${reservation.kolich} —á–µ–ª–æ–≤–µ–∫`
              await bot.sendMessage(process.env.TG_ID, message);
            // console.log(`‚úâÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${reservation.ktoBron} (${reservation.chatId})`);
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
          }
        }
      } catch (error) {
        console.error('üî• –û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
      }
    }, 1 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
  }}
};