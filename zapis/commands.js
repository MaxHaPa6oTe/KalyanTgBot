const { Reservation } = require('../models');
const { format } = require('date-fns');
const { ru } = require('date-fns/locale');

module.exports = {
  showUserReservations: async (bot, chatId) => {
    try {
      const reservations = await Reservation.findAll({ 
        where: { chatId },
        order: [['data', 'ASC'], ['time', 'ASC']]
      });
      
      if (reservations.length === 0) {
        await bot.sendMessage(chatId, 'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.');
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –±—Ä–æ–Ω—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π
      for (const res of reservations) {
        const date = new Date(res.data);
        const formattedDate = format(date, 'd MMMM yyyy', { locale: ru });
        
        const message = `üë§ <b>${res.ktoBron}</b>\n` +
                       `üìÖ <i>${formattedDate} –≤ ${res.time}</i>\n` +
                       `üë• –ì–æ—Å—Ç–µ–π: ${res.kolich}`;
        
        await bot.sendMessage(chatId, message, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { 
                  text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å', 
                  callback_data: `ask_cancel_${res.id}`
                }
              ]
            ]
          }
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–µ–π.');
    }
  },

  askCancelConfirmation: async (bot, chatId, reservationId, messageId) => {
    try {
      const reservation = await Reservation.findOne({
        where: { 
          id: reservationId,
          chatId: chatId 
        }
      });
      
      if (!reservation) {
        return await bot.sendMessage(chatId, '‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      }

      const date = new Date(reservation.data);
      const formattedDate = format(date, 'd MMMM yyyy', { locale: ru });

      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
      await bot.editMessageText(
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –±—Ä–æ–Ω—å?\n\n` +
        `üë§ ${reservation.ktoBron}\n` +
        `üìÖ ${formattedDate} –≤ ${reservation.time}\n` +
        `üë• ${reservation.kolich} –≥–æ—Å—Ç–µ–π`,
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data: `confirm_cancel_${reservationId}` },
                { text: '‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', callback_data: `reject_cancel_${messageId}` }
              ]
            ]
          }
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.');
    }
  },

  cancelReservation: async (bot, chatId, reservationId, originalMessageId) => {
    try {
      const deleted = await Reservation.destroy({
        where: { 
          id: reservationId,
          chatId: chatId 
        }
      });

      if (deleted) {
        await bot.deleteMessage(chatId, originalMessageId);
        await bot.sendMessage(chatId, '‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!');
        
        // const { showUserReservations } = require('./commands');
        // await showUserReservations(bot, chatId);
      } else {
        await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏.');
    }
  },
// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  showContacts: async (bot, chatId) => {
    await bot.sendMessage(
      chatId,
      '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n' +
      'üìç –ê–¥—Ä–µ—Å: —É–ª. –ó–æ—Ä–≥–µ–µ, –¥. 99, —ç—Ç. 3\n' +
      'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n' +
      'üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–í—Å, 10:00 - 23:00\n\n' +
      '–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —Å–æ—Ä—Ç–∞ —Ç–∞–±–∞–∫–∞ –∏ —É–≥–ª—è'
    );
  },
}