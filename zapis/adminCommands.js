// –í —Ñ–∞–π–ª–µ adminCommands.js
const { Reservation } = require('../models');
const { format, addDays, isSameDay, parseISO, isAfter } = require('date-fns');
const { ru } = require('date-fns/locale');
const Sequelize = require('sequelize');
const crypto = require('crypto');

const messageHashes = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ª–∏ –±—Ä–æ–Ω—å
const isReservationActive = (reservation) => {
  const now = new Date();
  const reservationDate = parseISO(reservation.data);
  
  // –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏ (—Ñ–æ—Ä–º–∞—Ç HH:mm –∏–ª–∏ HH:mm:ss)
  const [hours, minutes] = reservation.time.split(':').map(Number);
  reservationDate.setHours(hours, minutes, 0, 0);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞/–≤—Ä–µ–º—è –±—Ä–æ–Ω–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏
  return isAfter(reservationDate, now);
};

module.exports = {
  showWeeklyReservations: async (bot, chatId, messageId = null, callbackQuery = null) => {
    try {
      const now = new Date();
      const todayStart = new Date(now.setHours(0, 0, 0, 0));
      const sevenDaysLater = addDays(todayStart, 7);

      // –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const allReservations = await Reservation.findAll({
        where: {
          data: {
            [Sequelize.Op.between]: [
              format(todayStart, 'yyyy-MM-dd'),
              format(sevenDaysLater, 'yyyy-MM-dd')
            ]
          }
        },
        order: [['data', 'ASC'], ['time', 'ASC']]
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –±—Ä–æ–Ω–∏
      const activeReservations = allReservations.filter(isReservationActive);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = 'üìÖ –ë—Ä–æ–Ω–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π:\n\n';
      let currentDate = null;

      if (activeReservations.length === 0) {
        message = '–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π –Ω–µ—Ç.';
      } else {
        activeReservations.forEach(res => {
          const date = parseISO(res.data);
          const formattedDate = format(date, 'EEEE, d MMMM', { locale: ru });
          
          if (!currentDate || !isSameDay(currentDate, date)) {
            message += `\nüìå <b>${formattedDate}</b>\n`;
            currentDate = date;
          }

          message += `\nüë§ <b>${res.ktoBron}</b>\n` +
                     `üìû <b>${res.phoneNumber}</b>\n` +
                     `‚è∞ <i>${res.time.split(':').slice(0, 2).join(':')}</i>\n` +
                     `üë• –ì–æ—Å—Ç–µ–π: ${res.kolich}\n`;
        });
      }

      // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
      const messageHash = crypto.createHash('md5').update(message).digest('hex');
      const replyMarkup = {
        inline_keyboard: [[{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_week' }]]
      };

      const previousHash = messageHashes.get(messageId);
      if (previousHash === messageHash && messageId) {
        if (callbackQuery) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã' });
        }
        return;
      }

      messageHashes.set(messageId, messageHash);

      if (messageId) {
        try {
          await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'HTML',
            reply_markup: replyMarkup
          });
        } catch (error) {
          if (error.code === 400 && error.response?.description?.includes('message is not modified')) {
            if (callbackQuery) {
              await bot.answerCallbackQuery(callbackQuery.id, { text: '–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å' });
            }
            return;
          }
          throw error;
        }
      } else {
        const sentMessage = await bot.sendMessage(chatId, message, {
          parse_mode: 'HTML',
          reply_markup: replyMarkup
        });
        messageHashes.set(sentMessage.message_id, messageHash);
      }

      if (callbackQuery) {
        await bot.answerCallbackQuery(callbackQuery.id);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      if (callbackQuery) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
      }
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  }
};